## Utility scripts
### annotation_script.py
Script to add annotation to input callset with respect to specified comparison callsets. Annotations identify
records in the input callset that overlap with records in the comparison callsets. An example call is of the form:
```
python annotation_script.py --output_vcf {path} --source_vcf {path} --comparison_panel {path}
```
The full set of input flags and default values are given here:
```
  --output_vcf OUTPUT_VCF
                        output path for annotated file
  --source_vcf SOURCE_VCF
                        input vcf that will have annotations add to (a copy
                        of) it
  --comparison_panel COMPARISON_PANEL
                        Tab-separated panel file giving label/vcf pairs for
                        the comparison vcfs in each line of the text file
  --overlap_thr OVERLAP_THR
                        Overlap threshold to be applied when looking for
                        conflicting calls of different type
  --overlap_bp_margin OVERLAP_BP_MARGIN
                        breakpoint margin to be applied in determining overlap
                        of two intervals
  --allowed_overlap_type {agnostic,same,different}
                        SV type constraints on what events are considered
                        overlapping: if 'agnostic' then collisions will be
                        allowed across type; if 'same' then collisions will
                        require eventsof the same type; if 'different' then
                        collisions will require events of different type
```
Panel files should have label/callset names in the first column and paths in the second column (tab separated) as in this example:
```
Sniffles	/athena/ihlab/scratch/vpopic/SVNet/benchmarks/sniffles/CHM/CHM1_CHM13/sniffles_final.vcf
Huddleston	/athena/ihlab/scratch/vpopic/SVNet/benchmarks/datasets/CHM/huddleston_CHM1_CHM13_callsets/CHM1_CHM13_SVs_FINAL.annotated_formatcorrected.vcf
PBSV	/athena/ihlab/scratch/vpopic/SVNet/benchmarks/pbsv/CHM/CHM1_CHM13/pbsv_final.vcf
```

### upset_from_annotations.py
Script to generate upsetplots from vcfs output from SURVIVOR (i.e., include SUPP_VEC value in the info field). Upsetplots
can be stacked or unstacked, but stacked plots will require that the input vcfs have a 'DB' info field (added by the annotation
script) to create the stacked bars.An example call is of the form:
```
python upset_from_annotations.py --annot_vcf {path to annotated vcf} --output_path {path} --tools {toolname1 toolname2 ...} --plot_type {type}
```
The full set of input flags and default values are given here:
```
  --annot_vcf ANNOT_VCF
                        Comparison-annotated vcf file
  --output_path OUTPUT_PATH
                        Output path for plot
  --tools TOOLS [TOOLS ...]
                        Tool names
  --plot_type {stacked_upset,upset,venn,pseudovenn}
                        Flag to indicate whether to generate an upset or a
                        venn diagram

```

### survivor_merge.sh
Bash script to merge callsets given in an input panel file (first input argument) and path to SURVIVOR executable (second input argument),
and create upsetplot from the SURVIVOR output. Panel files should be in the same tab-separated format is in the case
of annotation_script.py (first column specifying the tool name, second column specifying path to vcf).